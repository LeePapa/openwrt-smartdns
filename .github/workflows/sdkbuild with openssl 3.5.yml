name: SDK build luci-app-smartdns and smartdns

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      CUR_VERSION: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Clone smartdns repo and extract version
        run: |
          git clone https://github.com/xianren78/openwrt-smartdns.git smartdns-repo
          cd smartdns-repo
          if [ -f Makefile ]; then
            VERSION=$(grep "^PKG_VERSION:=" Makefile | cut -d'=' -f2 | tr -d '[:space:]' || echo 'unknown')
          else
            VERSION="unknown"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
        id: version

  build-smartdns:
    needs: get-version
    strategy:
      matrix:
        include:
          - arch: x86_64
            target: x86
            subtarget: 64
            package_arch: x86_64
            goarch: x86_64
          - arch: aarch64
            target: armsr
            subtarget: armv8
            package_arch: aarch64_generic
            goarch: aarch64
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      ARCH: ${{ matrix.arch }}
      GOARCH: ${{ matrix.goarch }}
      PKG_VERSION: ${{ needs.get-version.outputs.CUR_VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set timezone
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Install dependencies
        run: |
          sudo apt-get update
          # Remove conflicting containerd packages
          sudo apt-get remove -y containerd containerd.io docker docker.io || true
          sudo apt-get autoremove -y
          # Install Docker from the official repository
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          # Install all required dependencies
          sudo apt-get install -y build-essential ccache git file g++ gawk gettext libncurses-dev libssl-dev zlib1g-dev zstd docker-ce docker-ce-cli
          sudo systemctl start docker
          # Verify Docker installation
          docker --version

      - name: Build OpenSSL 3.5 in Docker
        id: build-openssl
        run: |
          opensslver=$(curl -s https://api.github.com/repos/openssl/openssl/releases | jq -r '[.[] | select(.tag_name | startswith("openssl-3.5")) | .tag_name] | sort | last | sub("openssl-"; "")')
          if [ -z "$opensslver" ]; then
            opensslver="3.5.2"
          fi
          echo "Build with OpenSSL version: $opensslver"
          echo "opensslver=$opensslver" >> $GITHUB_OUTPUT
          mkdir -p ${{ github.workspace }}/openssl
          curl -sSL "https://github.com/openssl/openssl/releases/download/openssl-${opensslver}/openssl-${opensslver}.tar.gz" -o openssl.tar.gz
          tar -zxvf openssl.tar.gz --strip-components=1 -C openssl
          cd ${{ github.workspace }}
          rm -f docker-openssl.sh
          cat > docker-openssl.sh << EOF
          apk add perl make coreutils tar pkgconfig dpkg binutils
          cd /workdir/openssl
          if [ "\$GOARCH" == "x86_64" ]; then
            ./Configure no-tests linux-x86_64 enable-quic enable-ktls no-docs --prefix=/usr/local --libdir=lib
          elif [ "\$GOARCH" == "aarch64" ]; then
            ./Configure no-tests linux-aarch64 enable-quic enable-ktls no-docs --prefix=/usr/local --libdir=lib
          fi
          make clean && make -j\$(nproc)
          make install_sw DESTDIR=/workdir/openssl-install
          EOF
          docker run -i --rm -v ${{ github.workspace }}:/workdir -e GOARCH=${{ matrix.goarch }} muslcc/x86_64:${{ matrix.goarch }}-linux-musl sh /workdir/docker-openssl.sh
          # Debug: List installed OpenSSL files
          #find ${{ github.workspace }}/openssl-install -type f

      - name: Download and extract OpenWrt SDK
        run: |
          mkdir -p openwrt-sdk
          curl -sSL --retry 3 --retry-delay 5 https://downloads.openwrt.org/releases/24.10.2/targets/${{ matrix.target }}/${{ matrix.subtarget }}/openwrt-sdk-24.10.2-${{ matrix.target }}-${{ matrix.subtarget }}_gcc-13.3.0_musl.Linux-x86_64.tar.zst -o sdk.tar.zst
          tar --use-compress-program=unzstd -xvf sdk.tar.zst -C openwrt-sdk --strip-components=1

      - name: Update and install feeds (smartdns)
        run: |
          cd openwrt-sdk
          ./scripts/feeds update -a
          # Fix Rust 1.85.0 CI
          rm -rf feeds/packages/lang/rust/Makefile
          rm -rf feeds/packages/lang/rust/patches/0003-bump-libc-deps-to-0.2.146.patch
          wget -O feeds/packages/lang/rust/Makefile https://github.com/openwrt/packages/raw/refs/heads/master/lang/rust/Makefile
          ./scripts/feeds install -a

      - name: Clone smartdns source into feeds
        run: |
          cd openwrt-sdk
          rm -rf feeds/packages/net/smartdns
          rm -rf feeds/luci/applications/luci-app-smartdns
          git clone https://github.com/xianren78/openwrt-smartdns.git feeds/packages/net/smartdns
          MAKEFILE_PATH="feeds/packages/net/smartdns/Makefile"
          mv -f feeds/packages/net/smartdns/Makefile.sdk "$MAKEFILE_PATH"
          git clone https://github.com/pymumu/luci-app-smartdns.git feeds/luci/applications/luci-app-smartdns
          ./scripts/feeds install -f smartdns
          ./scripts/feeds install -f luci-app-smartdns

      - name: Configure build with custom OpenSSL
        run: |
          cd openwrt-sdk
          # Copy OpenSSL headers to SDK staging directory
          mkdir -p staging_dir/target-${{ matrix.package_arch }}_musl/usr/include
          cp -r ${{ github.workspace }}/openssl-install/usr/local/include/openssl staging_dir/target-${{ matrix.package_arch }}_musl/usr/include/
          # Copy OpenSSL libraries to SDK toolchain directory
          mkdir -p staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib
          cp ${{ github.workspace }}/openssl-install/usr/local/lib/libssl.so.3 staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib/
          cp ${{ github.workspace }}/openssl-install/usr/local/lib/libcrypto.so.3 staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib/
          # Create symbolic links for libssl.so and libcrypto.so
          ln -sf libssl.so.3 staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib/libssl.so
          ln -sf libcrypto.so.3 staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib/libcrypto.so
          # Debug: Verify symbolic links
          ls -l staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib/libssl*
          ls -l staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib/libcrypto*
          cat <<EOF > .config
          CONFIG_PACKAGE_smartdns=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-compat=y
          CONFIG_PACKAGE_luci-app-smartdns=y
          CONFIG_PACKAGE_libopenssl=n
          CONFIG_OPENSSL_WITH_QUIC=y
          CONFIG_TARGET_IMAGES=n
          EOF
          make defconfig

      - name: Build smartdns and luci-app-smartdns
        run: |
          cd openwrt-sdk
          # Debug: Verify CFLAGS, LDFLAGS, PKG_CONFIG_PATH, and library paths
          #echo "CUSTOM_CFLAGS=-I${{ github.workspace }}/openssl-install/usr/local/include"
          #echo "CUSTOM_LDFLAGS=-L${{ github.workspace }}/openssl-install/usr/local/lib -Wl,-rpath=/usr/lib/smartdns"
          #echo "CUSTOM_PKG_CONFIG_PATH=${{ github.workspace }}/openssl-install/usr/local/lib/pkgconfig"
          #find staging_dir/toolchain-${{ matrix.package_arch }}_gcc-13.3.0_musl/usr/lib -type f -name "libssl*" -o -name "libcrypto*"
          #find staging_dir/target-${{ matrix.package_arch }}_musl/usr/include/openssl -type f
          # Build with explicit CFLAGS and LDFLAGS
          unset CI
          unset GITHUB_ACTIONS
          unset GITHUB_RUN_ID
          unset GITHUB_WORKFLOW
          unset GITHUB_REPOSITORY
          unset RUNNER_OS
          make -j$(nproc) package/smartdns/compile \
            CFLAGS="-I${{ github.workspace }}/openssl-install/usr/local/include" \
            LDFLAGS="-L${{ github.workspace }}/openssl-install/usr/local/lib -Wl,-rpath=/usr/lib/smartdns" \
            PKG_CONFIG_PATH="${{ github.workspace }}/openssl-install/usr/local/lib/pkgconfig"
          make -j$(nproc) package/luci-app-smartdns/compile
          mkdir -p ${{ github.workspace }}/build
          cp bin/packages/${{ matrix.package_arch }}/packages/smartdns*.ipk ${{ github.workspace }}/build/ || true
          cp bin/packages/${{ matrix.package_arch }}/luci/luci-app-smartdns*.ipk ${{ github.workspace }}/build/ || true
          cp bin/packages/${{ matrix.package_arch }}/luci/luci-i18n-smartdns*.ipk ${{ github.workspace }}/build/ || true
          # Verify build outputs
          ls -l ${{ github.workspace }}/build/

      - name: Generate release tag
        id: tag
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c 1-7)
          echo "release_tag=smartdns-${{ matrix.package_arch }}-${{ needs.get-version.outputs.CUR_VERSION }}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "for OpenWrt 24.10 ${{ matrix.arch }} with OpenSSL v${{ steps.build-openssl.outputs.opensslver }}" > release.txt
          echo "" >> release.txt
          
          # Fetch latest commit SHA and timestamp for smartdns
          SMARTDNS_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/pymumu/smartdns/commits/master)
          SMARTDNS_SHA=$(echo "$SMARTDNS_RESPONSE" | jq -r '.sha // "unknown"')
          SMARTDNS_TIME=$(echo "$SMARTDNS_RESPONSE" | jq -r '.commit.committer.date // "unknown"')
          if [ "$SMARTDNS_SHA" = "unknown" ] || [ "$SMARTDNS_TIME" = "unknown" ]; then
            echo "Error: Failed to fetch smartdns commit SHA or timestamp" >&2
            exit 1
          fi
          echo "Smartdns: https://github.com/pymumu/smartdns/commit/$SMARTDNS_SHA ($SMARTDNS_TIME)" >> release.txt
          
          # Fetch latest commit SHA and timestamp for smartdns-webui
          SMARTDNS_WEBUI_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/pymumu/smartdns-webui/commits/main)
          SMARTDNS_WEBUI_SHA=$(echo "$SMARTDNS_WEBUI_RESPONSE" | jq -r '.sha // "unknown"')
          SMARTDNS_WEBUI_TIME=$(echo "$SMARTDNS_WEBUI_RESPONSE" | jq -r '.commit.committer.date // "unknown"')
          if [ "$SMARTDNS_WEBUI_SHA" = "unknown" ] || [ "$SMARTDNS_WEBUI_TIME" = "unknown" ]; then
            echo "Error: Failed to fetch smartdns-webui commit SHA or timestamp" >&2
            exit 1
          fi
          echo "Smartdns-webui: https://github.com/pymumu/smartdns-webui/commit/$SMARTDNS_WEBUI_SHA ($SMARTDNS_WEBUI_TIME)" >> release.txt
          
          # Fetch latest commit SHA and timestamp for luci-app-smartdns
          LUCI_APP_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/pymumu/luci-app-smartdns/commits/master)
          LUCI_APP_SHA=$(echo "$LUCI_APP_RESPONSE" | jq -r '.sha // "unknown"')
          LUCI_APP_TIME=$(echo "$LUCI_APP_RESPONSE" | jq -r '.commit.committer.date // "unknown"')
          if [ "$LUCI_APP_SHA" = "unknown" ] || [ "$LUCI_APP_TIME" = "unknown" ]; then
            echo "Error: Failed to fetch luci-app-smartdns commit SHA or timestamp" >&2
            exit 1
          fi
          echo "luci-app-smartdns: https://github.com/pymumu/luci-app-smartdns/commit/$LUCI_APP_SHA ($LUCI_APP_TIME)" >> release.txt
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ github.workspace }}/build/*.ipk
